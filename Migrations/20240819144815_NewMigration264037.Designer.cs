// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project0.Migrations
{
    [DbContext(typeof(BankDBContext))]
    [Migration("20240819144815_NewMigration264037")]
    partial class NewMigration264037
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdminAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("AccountName");

                    b.ToTable("AdminAccounts", (string)null);
                });

            modelBuilder.Entity("CustomerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<string>("AccountCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AccountIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("AccountName");

                    b.ToTable("CustomerAccounts", (string)null);
                });

            modelBuilder.Entity("CustomerTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ResponderAccountID")
                        .HasColumnType("int");

                    b.Property<int>("SenderAccountID")
                        .HasColumnType("int");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ResponderAccountID");

                    b.HasIndex("SenderAccountID");

                    b.ToTable("CustomerTickets", (string)null);
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("UnixTimestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("destinationAccountId")
                        .HasColumnType("int");

                    b.Property<int>("sourceAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("destinationAccountId");

                    b.HasIndex("sourceAccountId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("CustomerTicket", b =>
                {
                    b.HasOne("AdminAccount", "ResponserAccount")
                        .WithMany()
                        .HasForeignKey("ResponderAccountID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CustomerAccount", "SenderAccount")
                        .WithMany()
                        .HasForeignKey("SenderAccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResponserAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("CustomerAccount", "destinationAccount")
                        .WithMany()
                        .HasForeignKey("destinationAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerAccount", "sourceAccount")
                        .WithMany()
                        .HasForeignKey("sourceAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("destinationAccount");

                    b.Navigation("sourceAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
